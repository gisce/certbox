events {
    worker_connections 1024;
}

http {
    # Include MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Upstream definition for backend service
    upstream backend_service {
        server backend:8068;
    }

    server {
        listen 1443 ssl;
        server_name localhost;

        # SSL configuration (self-signed for testing)
        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Client certificate verification (mTLS)
        # Use CA certificate from Certbox to verify client certificates
        ssl_client_certificate /etc/nginx/certs/ca/ca.crt;
        ssl_verify_client optional;
        ssl_crl /etc/nginx/certs/ca/crl.pem;

        # Custom error pages for certificate issues
        error_page 495 496 497 /cert_error.html;
        
        location = /cert_error.html {
            internal;
            return 403 '{"error":"Client certificate required or invalid","message":"Access denied - valid client certificate required"}\n';
            add_header Content-Type application/json;
        }

        # Main proxy location - protected by client certificates
        location / {
            # Only allow requests with valid client certificates
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }

            proxy_pass http://backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Pass client certificate info to backend
            proxy_set_header X-Client-DN $ssl_client_s_dn;
            proxy_set_header X-Client-Verify $ssl_client_verify;
            proxy_set_header X-Client-Serial $ssl_client_serial;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API endpoint - also protected by client certificates
        location /api {
            if ($ssl_client_verify != SUCCESS) {
                return 403;
            }

            proxy_pass http://backend_service/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Pass client certificate info to backend
            proxy_set_header X-Client-DN $ssl_client_s_dn;
            proxy_set_header X-Client-Verify $ssl_client_verify;
            proxy_set_header X-Client-Serial $ssl_client_serial;
        }

        # Health check endpoint for nginx (doesn't require client cert)
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # Certbox status endpoint (doesn't require client cert)
        location /certbox-status {
            access_log off;
            proxy_pass http://certbox:8000/;
            proxy_set_header Host $host;
        }
    }
}